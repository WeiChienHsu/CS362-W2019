        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      298:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      298:   11:  if (*(int*)a < *(int*)b)
      100:   12:    return -1;
      198:   13:  return 0;
      298:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
       12:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        6:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2200:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     1000:   65:        }
      100:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
        -:   74:    {
       10:   75:      state->supplyCount[CURSE] = 10;
       10:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[CURSE] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[CURSE] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
        -:   88:    {
       10:   89:      state->supplyCount[ESTATE] = 8;
       10:   90:      state->supplyCount[DUCHY] = 8;
       10:   91:      state->supplyCount[PROVINCE] = 8;
       10:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[ESTATE] = 12;
    #####:   96:      state->supplyCount[DUCHY] = 12;
    #####:   97:      state->supplyCount[PROVINCE] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[COPPER] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[SILVER] = 40;
       10:  103:  state->supplyCount[GOLD] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = ADVENTURER; i <= TREASURE_MAP; i++)       	//loop all cards
        -:  107:    {
     3300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      200:  113:	      if (kingdomCards[j] == GREAT_HALL || kingdomCards[j] == GARDENS)
        -:  114:		{
       10:  115:		  if (numPlayers == 2){ 
       10:  116:		    state->supplyCount[i] = 8; 
       10:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       10:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1450:  130:	}
        -:  131:
      200:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       60:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
      160:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       60:  143:	  state->deck[i][j] = ESTATE;
       60:  144:	  state->deckCount[i]++;
       60:  145:	}
      320:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      140:  148:	  state->deck[i][j] = COPPER;
      140:  149:	  state->deckCount[i]++;		
      140:  150:	}
       20:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       60:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       20:  160:    }
        -:  161:
        -:  162:  //draw player hands
       60:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       20:  173:    }
        -:  174:  
        -:  175:  //set EMBARGO tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= TREASURE_MAP; i++)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
      270:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
       50:  193:    drawCard(state->whoseTurn, state);
       50:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       10:  198:  return 0;
       10:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       50:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       50:  209:  if (state->deckCount[player] < 1)
       24:  210:    return -1;
       26:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      500:  214:  while (state->deckCount[player] > 0) {
      224:  215:    card = floor(Random() * state->deckCount[player]);
      224:  216:    newDeck[newDeckPos] = state->deck[player][card];
      224:  217:    newDeckPos++;
     1520:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      536:  219:      state->deck[player][i] = state->deck[player][i+1];
      536:  220:    }
      224:  221:    state->deckCount[player]--;
        -:  222:  }
      500:  223:  for (i = 0; i < newDeckPos; i++) {
      224:  224:    state->deck[player][i] = newDeck[i];
      224:  225:    state->deckCount[player]++;
      224:  226:  }
        -:  227:
       26:  228:  return 0;
       50:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < ADVENTURER || card > TREASURE_MAP )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       24:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[PROVINCE] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == CURSE) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == ESTATE) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == DUCHY) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == PROVINCE) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == GREAT_HALL) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == GARDENS) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == CURSE) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == ESTATE) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == DUCHY) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == PROVINCE) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == GREAT_HALL) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == GARDENS) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == CURSE) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == ESTATE) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == DUCHY) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == PROVINCE) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == GREAT_HALL) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == GARDENS) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      134:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       84:  533:    for (i = 0; i < state->discardCount[player];i++){
       24:  534:      state->deck[player][i] = state->discard[player][i];
       24:  535:      state->discard[player][i] = -1;
       24:  536:    }
        -:  537:
       18:  538:    state->deckCount[player] = state->discardCount[player];
       18:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       18:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       18:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       18:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       18:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       18:  559:    if (deckCounter == 0)
       12:  560:      return -1;
        -:  561:
        6:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  563:    state->deckCount[player]--;
        6:  564:    state->handCount[player]++;//Increment hand count
        6:  565:  }
        -:  566:
        -:  567:  else{
      116:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      116:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      116:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      116:  576:    state->deckCount[player]--;
      116:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      122:  580:  return 0;
      134:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
        7:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case CURSE:
        7:  588:      return 0;
        -:  589:    case ESTATE:
    #####:  590:      return 2;
        -:  591:    case DUCHY:
    #####:  592:      return 5;
        -:  593:    case PROVINCE:
    #####:  594:      return 8;
        -:  595:    case COPPER:
    #####:  596:      return 0;
        -:  597:    case SILVER:
    #####:  598:      return 3;
        -:  599:    case GOLD:
    #####:  600:      return 6;
        -:  601:    case ADVENTURER:
    #####:  602:      return 6;
        -:  603:    case COUNCIL_ROOM:
    #####:  604:      return 5;
        -:  605:    case FEAST:
    #####:  606:      return 4;
        -:  607:    case GARDENS:
    #####:  608:      return 4;
        -:  609:    case MINE:
    #####:  610:      return 5;
        -:  611:    case REMODEL:
    #####:  612:      return 4;
        -:  613:    case SMITHY:
    #####:  614:      return 4;
        -:  615:    case VILLAGE:
    #####:  616:      return 3;
        -:  617:    case BARON:
    #####:  618:      return 4;
        -:  619:    case GREAT_HALL:
    #####:  620:      return 3;
        -:  621:    case MINION:
    #####:  622:      return 5;
        -:  623:    case STEWARD:
    #####:  624:      return 3;
        -:  625:    case TRIBUTE:
    #####:  626:      return 5;
        -:  627:    case AMBASSADOR:
    #####:  628:      return 3;
        -:  629:    case CUTPURSE:
    #####:  630:      return 4;
        -:  631:    case EMBARGO: 
    #####:  632:      return 2;
        -:  633:    case OUTPOST:
    #####:  634:      return 5;
        -:  635:    case SALVAGER:
    #####:  636:      return 4;
        -:  637:    case SEA_HAG:
    #####:  638:      return 4;
        -:  639:    case TREASURE_MAP:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        7:  644:}
        -:  645:
        -:  646://purserm functions for 5 cards, Adventurer, Smithy, Council Room, Cutpurse, and Sea Hag here:
        -:  647:int adventurerCard(int currentPlayer, struct gameState *state, int drawntreasure){
        -:  648:	int temphand[MAX_HAND];
        6:  649:	int z = 0; // counter for tempHand
       96:  650:	while(drawntreasure<3){
        -:  651:		//if the deck is empty, shuffle discard and add to deck.
       42:  652:		if(state->deckCount[currentPlayer] <1){
       12:  653:			shuffle(currentPlayer, state);
       12:  654:		}
       42:  655:		drawCard(currentPlayer, state);
       42:  656:		int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top card of hand is most recently drawn card
      108:  657:		if(cardDrawn == COPPER || cardDrawn == SILVER || cardDrawn == GOLD)
       18:  658:			drawntreasure++;
        -:  659:		else{
       24:  660:			temphand[z]=cardDrawn;
       24:  661:			state->handCount[currentPlayer]--; //this should remove the top card (the most recently drawn)
       24:  662:			z++;
        -:  663:		}
        -:  664:	}
       60:  665:	while(z-1>=0){
       24:  666:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; //discard all cards in play that have been drawn
       24:  667:		z--;
        -:  668:	}
        6:  669:	return 0;
        -:  670:
        -:  671:}
        -:  672:
        -:  673:
        -:  674:int smithyCard(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	//+3 cards
        -:  676:	int i;
       12:  677:	for (i = 1; i < 3; i++)
        -:  678:	{
        4:  679:		drawCard(currentPlayer, state);
        4:  680:	}
        -:  681:	
        -:  682:	//discard card from hand
        2:  683:	discardCard(handPos, currentPlayer, state, 0);
        2:  684:	return 0;
        -:  685:
        -:  686:}
        -:  687:
        -:  688:int council_roomCard(struct gameState *state, int currentPlayer, int handPos){
        -:  689:	//+4 cards
        -:  690:	int i;
       70:  691:	for(i=0; i<4; i++)
        -:  692:	{
       28:  693:		drawCard(currentPlayer, state);
       28:  694:	}
        -:  695:
        -:  696:	//Each other player draws a card
       42:  697:	for(i=0; i < state->numPlayers; i++)
        -:  698:	{
       14:  699:		if(i != currentPlayer )
        -:  700:		{
        7:  701:			drawCard(i, state);
        7:  702:		}
       14:  703:	}
        -:  704:	//put played card in played card pile
        7:  705:	discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        7:  707:	return 0;
        -:  708:
        -:  709:}
        -:  710:
        -:  711:int cutpurseCard(struct gameState *state, int currentPlayer, int handPos){
        -:  712:	int i;
        -:  713:	int k;
        -:  714:	int j;
    #####:  715:	updateCoins(currentPlayer, state, 2);
    #####:  716:	for(i = 0; i < state->numPlayers; i++)
        -:  717:	{
    #####:  718:		if(i != currentPlayer)
        -:  719:		{
    #####:  720:			for(j = 0; j < state->handCount[i]; j++)
        -:  721:			{
    #####:  722:				if(state->hand[i][j] == COPPER)
        -:  723:				{
    #####:  724:					discardCard(j, i, state, 0);
    #####:  725:					break;
        -:  726:				}
    #####:  727:				if(j == state->handCount[i])
        -:  728:				{
    #####:  729:					for (k=0; k < state->handCount[i]; k++)
        -:  730:					{
        -:  731:						if (DEBUG)
        -:  732:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  733:					}
    #####:  734:					break;
        -:  735:				}
    #####:  736:			}
    #####:  737:		}
    #####:  738:	}
        -:  739:	//discard played card from hand
    #####:  740:	discardCard(handPos, currentPlayer, state, 1);
    #####:  741:	return 0;
        -:  742:}
        -:  743:
        -:  744:int sea_hagCard(struct gameState *state, int currentPlayer){
        -:  745:	int i;
    #####:  746:	for(i = 0; i < state->numPlayers; i++){
    #####:  747:			state->deck[i][state->deckCount[i]--] = CURSE; //Top card now CURSE
    #####:  748:		if(i != currentPlayer){
    #####:  749:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  750:			state->deckCount[i]--;
    #####:  751:			state->discardCount[i]++;
    #####:  752:		}
    #####:  753:	}
    #####:  754:	return 0;
        -:  755:}
        -:  756:
        -:  757:
        -:  758:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  759:{
        -:  760:  int i;
        -:  761:  int j;
        -:  762:  //int k;
        -:  763:  int x;
        -:  764:  int index;
       10:  765:  int currentPlayer = whoseTurn(state);
       10:  766:  int nextPlayer = currentPlayer + 1;
        -:  767:
       10:  768:  int tributeRevealedCards[2] = {-1, -1};
        -:  769:  int temphand[MAX_HAND];// moved above the if statement
       10:  770:  int drawntreasure=0;
        -:  771:  //int cardDrawn;
        -:  772:  //int z = 0;// this is the counter for the temp hand
       10:  773:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  774:    nextPlayer = 0;
    #####:  775:  }
        -:  776:  
        -:  777:	
        -:  778:  //uses switch to select card and perform actions
       25:  779:  switch( card ) 
        -:  780:    {
        -:  781:    case ADVENTURER:
        6:  782:    	adventurerCard(currentPlayer, state, drawntreasure);
        -:  783: //     while(drawntreasure<2){
        -:  784://	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  785://	  shuffle(currentPlayer, state);
        -:  786://	}
        -:  787://	drawCard(currentPlayer, state);
        -:  788://	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  789://	if (cardDrawn == COPPER || cardDrawn == SILVER || cardDrawn == GOLD)
        -:  790://	  drawntreasure++;
        -:  791://	else{
        -:  792://	  temphand[z]=cardDrawn;
        -:  793://	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  794://	  z++;
        -:  795://	}
        -:  796:  //    }
        -:  797:    //  while(z-1>=0){
        -:  798://	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  799://	z=z-1;
        -:  800:  //    }
        -:  801:    //  return 0;
        -:  802:			
        -:  803:    case COUNCIL_ROOM:
        7:  804:    	council_roomCard(state, currentPlayer, handPos);
        -:  805:      //+4 Cards
        -:  806://      for (i = 0; i < 4; i++)
        -:  807://	{
        -:  808://	  drawCard(currentPlayer, state);
        -:  809://	}
        -:  810:			
        -:  811:      //+1 Buy
        -:  812://      state->numBuys++;
        -:  813:			
        -:  814:      //Each other player draws a card
        -:  815://      for (i = 0; i < state->numPlayers; i++)
        -:  816://	{
        -:  817://	  if ( i != currentPlayer )
        -:  818://	    {
        -:  819://	      drawCard(i, state);
        -:  820://	    }
        -:  821://	}
        -:  822:			
        -:  823:      //put played card in played card pile
        -:  824://      discardCard(handPos, currentPlayer, state, 0);
        -:  825:			
        -:  826://      return 0;
        -:  827:			
        -:  828:    case FEAST:
        -:  829:      //gain card with cost up to 5
        -:  830:      //Backup hand
      166:  831:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       76:  832:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       76:  833:	state->hand[currentPlayer][i] = -1;//Set to nothing
       76:  834:      }
        -:  835:      //Backup hand
        -:  836:
        -:  837:      //Update Coins for Buy
        7:  838:      updateCoins(currentPlayer, state, 5);
        7:  839:      x = 1;//Condition to loop on
       28:  840:      while( x == 1) {//Buy one card
        7:  841:	if (supplyCount(choice1, state) <= 0){
        -:  842:	  if (DEBUG)
        -:  843:	    printf("None of that card left, sorry!\n");
        -:  844:
        -:  845:	  if (DEBUG){
        -:  846:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  847:	  }
    #####:  848:	}
        7:  849:	else if (state->coins < getCost(choice1)){
    #####:  850:	  printf("That card is too expensive!\n");
        -:  851:
        -:  852:	  if (DEBUG){
        -:  853:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  854:	  }
    #####:  855:	}
        -:  856:	else{
        -:  857:
        -:  858:	  if (DEBUG){
        -:  859:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  860:	  }
        -:  861:
        7:  862:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        7:  863:	  x = 0;//No more buying cards
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  867:	  }
        -:  868:
        -:  869:	}
        -:  870:      }     
        -:  871:
        -:  872:      //Reset Hand
      166:  873:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       76:  874:	state->hand[currentPlayer][i] = temphand[i];
       76:  875:	temphand[i] = -1;
       76:  876:      }
        -:  877:      //Reset Hand
        -:  878:      			
        7:  879:      return 0;
        -:  880:			
        -:  881:    case GARDENS:
    #####:  882:      return -1;
        -:  883:			
        -:  884:    case MINE:
    #####:  885:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  886:
    #####:  887:      if (state->hand[currentPlayer][choice1] < COPPER || state->hand[currentPlayer][choice1] > GOLD)
        -:  888:	{
    #####:  889:	  return -1;
        -:  890:	}
        -:  891:		
    #####:  892:      if (choice2 > TREASURE_MAP || choice2 < CURSE)
        -:  893:	{
    #####:  894:	  return -1;
        -:  895:	}
        -:  896:
    #####:  897:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  898:	{
    #####:  899:	  return -1;
        -:  900:	}
        -:  901:
    #####:  902:      gainCard(choice2, state, 2, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:
        -:  907:      //discard trashed card
    #####:  908:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:	{
    #####:  910:	  if (state->hand[currentPlayer][i] == j)
        -:  911:	    {
    #####:  912:	      discardCard(i, currentPlayer, state, 0);			
    #####:  913:	      break;
        -:  914:	    }
    #####:  915:	}
        -:  916:			
    #####:  917:      return 0;
        -:  918:			
        -:  919:    case REMODEL:
    #####:  920:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  921:
    #####:  922:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  923:	{
    #####:  924:	  return -1;
        -:  925:	}
        -:  926:
    #####:  927:      gainCard(choice2, state, 0, currentPlayer);
        -:  928:
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
        -:  931:
        -:  932:      //discard trashed card
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  934:	{
    #####:  935:	  if (state->hand[currentPlayer][i] == j)
        -:  936:	    {
    #####:  937:	      discardCard(i, currentPlayer, state, 0);			
    #####:  938:	      break;
        -:  939:	    }
    #####:  940:	}
        -:  941:
        -:  942:
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case SMITHY:
        2:  946:    	smithyCard(state, currentPlayer, handPos);
        -:  947:      //+3 Cards
        -:  948://      for (i = 0; i < 3; i++)
        -:  949://	{
        -:  950://	  drawCard(currentPlayer, state);
        -:  951://	}
        -:  952:			
        -:  953:      //discard card from hand
        -:  954://      discardCard(handPos, currentPlayer, state, 0);
        -:  955://      return 0;
        -:  956:		
        -:  957:    case VILLAGE:
        -:  958:      //+1 Card
        3:  959:      drawCard(currentPlayer, state);
        -:  960:			
        -:  961:      //+2 Actions
        3:  962:      state->numActions = state->numActions + 2;
        -:  963:			
        -:  964:      //discard played card from hand
        3:  965:      discardCard(handPos, currentPlayer, state, 0);
        3:  966:      return 0;
        -:  967:		
        -:  968:    case BARON:
    #####:  969:      state->numBuys++;//Increase buys by 1!
    #####:  970:      if (choice1 > 0){//Boolean true or going to discard an ESTATE
    #####:  971:	int p = 0;//Iterator for hand!
    #####:  972:	int card_not_discarded = 1;//Flag for discard set!
    #####:  973:	while(card_not_discarded){
    #####:  974:	  if (state->hand[currentPlayer][p] == ESTATE){//Found an ESTATE card!
    #####:  975:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  976:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  977:	    state->discardCount[currentPlayer]++;
    #####:  978:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  979:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  980:	    }
    #####:  981:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  982:	    state->handCount[currentPlayer]--;
    #####:  983:	    card_not_discarded = 0;//Exit the loop
    #####:  984:	  }
    #####:  985:	  else if (p > state->handCount[currentPlayer]){
        -:  986:	    if(DEBUG) {
        -:  987:	      printf("No ESTATE cards in your hand, invalid choice\n");
        -:  988:	      printf("Must gain an ESTATE if there are any\n");
        -:  989:	    }
    #####:  990:	    if (supplyCount(ESTATE, state) > 0){
    #####:  991:	      gainCard(ESTATE, state, 0, currentPlayer);
    #####:  992:	      state->supplyCount[ESTATE]--;//Decrement estates
    #####:  993:	      if (supplyCount(ESTATE, state) == 0){
    #####:  994:		isGameOver(state);
    #####:  995:	      }
    #####:  996:	    }
    #####:  997:	    card_not_discarded = 0;//Exit the loop
    #####:  998:	  }
        -:  999:			    
        -: 1000:	  else{
    #####: 1001:	    p++;//Next card
        -: 1002:	  }
        -: 1003:	}
    #####: 1004:      }
        -: 1005:			    
        -: 1006:      else{
    #####: 1007:	if (supplyCount(ESTATE, state) > 0){
    #####: 1008:	  gainCard(ESTATE, state, 0, currentPlayer);//Gain an ESTATE
    #####: 1009:	  state->supplyCount[ESTATE]--;//Decrement Estates
    #####: 1010:	  if (supplyCount(ESTATE, state) == 0){
    #####: 1011:	    isGameOver(state);
    #####: 1012:	  }
    #####: 1013:	}
        -: 1014:      }
        -: 1015:	    
        -: 1016:      
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case GREAT_HALL:
        -: 1020:      //+1 Card
    #####: 1021:      drawCard(currentPlayer, state);
        -: 1022:			
        -: 1023:      //+1 Actions
    #####: 1024:      state->numActions++;
        -: 1025:			
        -: 1026:      //discard card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case MINION:
        -: 1031:      //+1 action
    #####: 1032:      state->numActions++;
        -: 1033:			
        -: 1034:      //discard card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);
        -: 1036:			
    #####: 1037:      if (choice1)		//+2 coins
        -: 1038:	{
    #####: 1039:	  state->coins = state->coins + 2;
    #####: 1040:	}
        -: 1041:			
    #####: 1042:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1043:	{
        -: 1044:	  //discard hand
    #####: 1045:	  while(numHandCards(state) > 0)
        -: 1046:	    {
    #####: 1047:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1048:	    }
        -: 1049:				
        -: 1050:	  //draw 4
    #####: 1051:	  for (i = 0; i < 4; i++)
        -: 1052:	    {
    #####: 1053:	      drawCard(currentPlayer, state);
    #####: 1054:	    }
        -: 1055:				
        -: 1056:	  //other players discard hand and redraw if hand size > 4
    #####: 1057:	  for (i = 0; i < state->numPlayers; i++)
        -: 1058:	    {
    #####: 1059:	      if (i != currentPlayer)
        -: 1060:		{
    #####: 1061:		  if ( state->handCount[i] > 4 )
        -: 1062:		    {
        -: 1063:		      //discard hand
    #####: 1064:		      while( state->handCount[i] > 0 )
        -: 1065:			{
    #####: 1066:			  discardCard(handPos, i, state, 0);
        -: 1067:			}
        -: 1068:							
        -: 1069:		      //draw 4
    #####: 1070:		      for (j = 0; j < 4; j++)
        -: 1071:			{
    #####: 1072:			  drawCard(i, state);
    #####: 1073:			}
    #####: 1074:		    }
    #####: 1075:		}
    #####: 1076:	    }
        -: 1077:				
    #####: 1078:	}
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case STEWARD:
    #####: 1082:      if (choice1 == 1)
        -: 1083:	{
        -: 1084:	  //+2 cards
    #####: 1085:	  drawCard(currentPlayer, state);
    #####: 1086:	  drawCard(currentPlayer, state);
    #####: 1087:	}
    #####: 1088:      else if (choice1 == 2)
        -: 1089:	{
        -: 1090:	  //+2 coins
    #####: 1091:	  state->coins = state->coins + 2;
    #####: 1092:	}
        -: 1093:      else
        -: 1094:	{
        -: 1095:	  //trash 2 cards in hand
    #####: 1096:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1097:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1098:	}
        -: 1099:			
        -: 1100:      //discard card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case TRIBUTE:
    #####: 1105:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1106:	if (state->deckCount[nextPlayer] > 0){
    #####: 1107:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1108:	  state->deckCount[nextPlayer]--;
    #####: 1109:	}
    #####: 1110:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1111:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1112:	  state->discardCount[nextPlayer]--;
    #####: 1113:	}
        -: 1114:	else{
        -: 1115:	  //No Card to Reveal
        -: 1116:	  if (DEBUG){
        -: 1117:	    printf("No cards to reveal\n");
        -: 1118:	  }
        -: 1119:	}
    #####: 1120:      }
        -: 1121:	    
        -: 1122:      else{
    #####: 1123:	if (state->deckCount[nextPlayer] == 0){
    #####: 1124:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1125:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1126:	    state->deckCount[nextPlayer]++;
    #####: 1127:	    state->discard[nextPlayer][i] = -1;
    #####: 1128:	    state->discardCount[nextPlayer]--;
    #####: 1129:	  }
        -: 1130:			    
    #####: 1131:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1132:	} 
    #####: 1133:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1134:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1135:	state->deckCount[nextPlayer]--;
    #####: 1136:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1137:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1138:	state->deckCount[nextPlayer]--;
        -: 1139:      }    
        -: 1140:		       
    #####: 1141:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1142:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1143:	state->playedCardCount++;
    #####: 1144:	tributeRevealedCards[1] = -1;
    #####: 1145:      }
        -: 1146:
    #####: 1147:      for (i = 0; i <= 2; i ++){
    #####: 1148:	if (tributeRevealedCards[i] == COPPER || tributeRevealedCards[i] == SILVER || tributeRevealedCards[i] == GOLD){//Treasure cards
    #####: 1149:	  state->coins += 2;
    #####: 1150:	}
        -: 1151:		    
    #####: 1152:	else if (tributeRevealedCards[i] == ESTATE || tributeRevealedCards[i] == DUCHY || tributeRevealedCards[i] == PROVINCE || tributeRevealedCards[i] == GARDENS || tributeRevealedCards[i] == GREAT_HALL){//Victory Card Found
    #####: 1153:	  drawCard(currentPlayer, state);
    #####: 1154:	  drawCard(currentPlayer, state);
    #####: 1155:	}
        -: 1156:	else{//Action Card
    #####: 1157:	  state->numActions = state->numActions + 2;
        -: 1158:	}
    #####: 1159:      }
        -: 1160:	    
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case AMBASSADOR:
    #####: 1164:      j = 0;		//used to check if player has enough cards to discard
        -: 1165:
    #####: 1166:      if (choice2 > 2 || choice2 < 0)
        -: 1167:	{
    #####: 1168:	  return -1;				
        -: 1169:	}
        -: 1170:
    #####: 1171:      if (choice1 == handPos)
        -: 1172:	{
    #####: 1173:	  return -1;
        -: 1174:	}
        -: 1175:
    #####: 1176:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1177:	{
    #####: 1178:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1179:	    {
    #####: 1180:	      j++;
    #####: 1181:	    }
    #####: 1182:	}
    #####: 1183:      if (j < choice2)
        -: 1184:	{
    #####: 1185:	  return -1;				
        -: 1186:	}
        -: 1187:
        -: 1188:      if (DEBUG) 
        -: 1189:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1190:
        -: 1191:      //increase supply count for choosen card by amount being discarded
    #####: 1192:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1193:			
        -: 1194:      //each other player gains a copy of revealed card
    #####: 1195:      for (i = 0; i < state->numPlayers; i++)
        -: 1196:	{
    #####: 1197:	  if (i != currentPlayer)
        -: 1198:	    {
    #####: 1199:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1200:	    }
    #####: 1201:	}
        -: 1202:
        -: 1203:      //discard played card from hand
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1205:
        -: 1206:      //trash copies of cards returned to supply
    #####: 1207:      for (j = 0; j < choice2; j++)
        -: 1208:	{
    #####: 1209:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1210:	    {
    #####: 1211:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1212:		{
    #####: 1213:		  discardCard(i, currentPlayer, state, 1);
    #####: 1214:		  break;
        -: 1215:		}
    #####: 1216:	    }
    #####: 1217:	}			
        -: 1218:
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case CUTPURSE:
    #####: 1222:    	cutpurseCard(state, currentPlayer, handPos);
        -: 1223:
        -: 1224://      updateCoins(currentPlayer, state, 2);
        -: 1225://      for (i = 0; i < state->numPlayers; i++)
        -: 1226://	{
        -: 1227://	  if (i != currentPlayer)
        -: 1228://	    {
        -: 1229://	      for (j = 0; j < state->handCount[i]; j++)
        -: 1230://		{
        -: 1231://		  if (state->hand[i][j] == COPPER)
        -: 1232://		    {
        -: 1233://		      discardCard(j, i, state, 0);
        -: 1234://		      break;
        -: 1235://		    }
        -: 1236://		  if (j == state->handCount[i])
        -: 1237://		    {
        -: 1238://		      for (k = 0; k < state->handCount[i]; k++)
        -: 1239://			{
        -: 1240://			  if (DEBUG)
        -: 1241://			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1242://			}	
        -: 1243://		      break;
        -: 1244://		    }		
        -: 1245://		}
        -: 1246://					
        -: 1247://	    }
        -: 1248:				
        -: 1249://	}				
        -: 1250:
        -: 1251:      //discard played card from hand
        -: 1252://      discardCard(handPos, currentPlayer, state, 0);			
        -: 1253:
        -: 1254://      return 0;
        -: 1255:
        -: 1256:		
        -: 1257:    case EMBARGO: 
        -: 1258:      //+2 Coins
    #####: 1259:      state->coins = state->coins + 2;
        -: 1260:			
        -: 1261:      //see if selected pile is in play
    #####: 1262:      if ( state->supplyCount[choice1] == -1 )
        -: 1263:	{
    #####: 1264:	  return -1;
        -: 1265:	}
        -: 1266:			
        -: 1267:      //add EMBARGO token to selected supply pile
    #####: 1268:      state->embargoTokens[choice1]++;
        -: 1269:			
        -: 1270:      //trash card
    #####: 1271:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1272:      return 0;
        -: 1273:		
        -: 1274:    case OUTPOST:
        -: 1275:      //set OUTPOST flag
    #####: 1276:      state->outpostPlayed++;
        -: 1277:			
        -: 1278:      //discard card
    #####: 1279:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1280:      return 0;
        -: 1281:		
        -: 1282:    case SALVAGER:
        -: 1283:      //+1 buy
    #####: 1284:      state->numBuys++;
        -: 1285:			
    #####: 1286:      if (choice1)
        -: 1287:	{
        -: 1288:	  //gain coins equal to trashed card
    #####: 1289:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1290:	  //trash card
    #####: 1291:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1292:	}
        -: 1293:			
        -: 1294:      //discard card
    #####: 1295:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1296:      return 0;
        -: 1297:		
        -: 1298:    case SEA_HAG:
    #####: 1299:    	sea_hagCard(state, currentPlayer);
        -: 1300://      for (i = 0; i < state->numPlayers; i++){
        -: 1301://	if (i != currentPlayer){
        -: 1302://	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1303://	  state->discardCount[i]++;
        -: 1304://	  state->deck[i][state->deckCount[i]--] = CURSE;//Top card now a CURSE
        -: 1305://	}
        -: 1306://     }
        -: 1307://      return 0;
        -: 1308:		
        -: 1309:    case TREASURE_MAP:
        -: 1310:      //search hand for another TREASURE_MAP
    #####: 1311:      index = -1;
    #####: 1312:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1313:	{
    #####: 1314:	  if (state->hand[currentPlayer][i] == TREASURE_MAP && i != handPos)
        -: 1315:	    {
    #####: 1316:	      index = i;
    #####: 1317:	      break;
        -: 1318:	    }
    #####: 1319:	}
    #####: 1320:      if (index > -1)
        -: 1321:	{
        -: 1322:	  //trash both treasure cards
    #####: 1323:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1324:	  discardCard(index, currentPlayer, state, 1);
        -: 1325:
        -: 1326:	  //gain 4 Gold cards
    #####: 1327:	  for (i = 0; i < 4; i++)
        -: 1328:	    {
    #####: 1329:	      gainCard(GOLD, state, 1, currentPlayer);
    #####: 1330:	    }
        -: 1331:				
        -: 1332:	  //return success
    #####: 1333:	  return 1;
        -: 1334:	}
        -: 1335:			
        -: 1336:      //no second TREASURE_MAP found in hand
    #####: 1337:      return -1;
        -: 1338:    }
        -: 1339:	
    #####: 1340:  return -1;
       10: 1341:}
        -: 1342:
        -: 1343:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1344:{
        -: 1345:	
        -: 1346:  //if card is not trashed, added to Played pile 
       12: 1347:  if (trashFlag < 1)
        -: 1348:    {
        -: 1349:      //add card to played pile
       12: 1350:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       12: 1351:      state->playedCardCount++;
       12: 1352:    }
        -: 1353:	
        -: 1354:  //set played card to -1
       12: 1355:  state->hand[currentPlayer][handPos] = -1;
        -: 1356:	
        -: 1357:  //remove card from player's hand
       12: 1358:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1359:    {
        -: 1360:      //reduce number of cards in hand
    #####: 1361:      state->handCount[currentPlayer]--;
    #####: 1362:    }
       12: 1363:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1364:    {
        -: 1365:      //reduce number of cards in hand
    #####: 1366:      state->handCount[currentPlayer]--;
    #####: 1367:    }
        -: 1368:  else 	
        -: 1369:    {
        -: 1370:      //replace discarded card with last card in hand
       12: 1371:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1372:      //set last card to -1
       12: 1373:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1374:      //reduce number of cards in hand
       12: 1375:      state->handCount[currentPlayer]--;
        -: 1376:    }
        -: 1377:	
       12: 1378:  return 0;
        -: 1379:}
        -: 1380:
        -: 1381:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1382:{
        -: 1383:  //Note: supplyPos is enum of choosen card
        -: 1384:	
        -: 1385:  //check if supply pile is empty (0) or card is not used in game (-1)
       17: 1386:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1387:    {
    #####: 1388:      return -1;
        -: 1389:    }
        -: 1390:	
        -: 1391:  //added card for [whoseTurn] current player:
        -: 1392:  // toFlag = 0 : add to discard
        -: 1393:  // toFlag = 1 : add to deck
        -: 1394:  // toFlag = 2 : add to hand
        -: 1395:
       17: 1396:  if (toFlag == 1)
        -: 1397:    {
    #####: 1398:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1399:      state->deckCount[player]++;
    #####: 1400:    }
       17: 1401:  else if (toFlag == 2)
        -: 1402:    {
       10: 1403:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       10: 1404:      state->handCount[player]++;
       10: 1405:    }
        -: 1406:  else
        -: 1407:    {
        7: 1408:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        7: 1409:      state->discardCount[player]++;
        -: 1410:    }
        -: 1411:	
        -: 1412:  //decrease number in supply pile
       17: 1413:  state->supplyCount[supplyPos]--;
        -: 1414:	 
       17: 1415:  return 0;
       17: 1416:}
        -: 1417:
        -: 1418:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1419:{
        -: 1420:  int i;
        -: 1421:	
        -: 1422:  //reset coin count
       17: 1423:  state->coins = 0;
        -: 1424:
        -: 1425:  //add coins for each Treasure card in player's hand
      272: 1426:  for (i = 0; i < state->handCount[player]; i++)
        -: 1427:    {
      119: 1428:      if (state->hand[player][i] == COPPER)
        -: 1429:	{
       40: 1430:	  state->coins += 1;
       40: 1431:	}
       79: 1432:      else if (state->hand[player][i] == SILVER)
        -: 1433:	{
    #####: 1434:	  state->coins += 2;
    #####: 1435:	}
       79: 1436:      else if (state->hand[player][i] == GOLD)
        -: 1437:	{
    #####: 1438:	  state->coins += 3;
    #####: 1439:	}	
      119: 1440:    }	
        -: 1441:
        -: 1442:  //add bonus
       17: 1443:  state->coins += bonus;
        -: 1444:
       17: 1445:  return 0;
        -: 1446:}
        -: 1447:
        -: 1448:
        -: 1449://end of dominion.c
        -: 1450:
